{"version":3,"file":"static/js/915.fc3f30b8.chunk.js","mappings":"ymDAIaA,EAAgB,gBAMhBC,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,EAJJ,2BAQA,SAASC,EAAmB,G,IAAEC,EAAAA,EAAAA,kBAAmBC,EAAAA,EAAAA,IAC/C,WAIOA,EAAMC,OAAA,aAAqB,SAAAC,GAAC,OAAIC,OAAJ,WAAnC,G,IAGWC,EAAb,YAKE,c,aACE,cAAM,CAAEL,kBAAmBD,EAAmBO,MAA9C,MAEA,SAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,mBAAwB,0BAAxB,I,EAZJ,qDAeUC,SAAAA,GAINC,KAAA,WAAgB,CAAEC,QAAAA,KAnBtB,wBAsBUC,SAAAA,GAINF,KAAA,WAAgB,CAAEG,QAASC,EAAS,MA1BxC,mBA6BUC,WAINL,KAAA,kBAjCJ,0B,MAqCSA,K,oBAKL,0CAA8C,EAA9C,oBACA,6CAAiD,EAAjD,uBACA,wCAA4C,EAA5C,kB,gBAEsB,uCAEd,mBAAgCI,EAAhC,MAFc,OAGb,YAEL,yBAAIE,EAAAA,QACF,MAAM,IAAN,EAGF,YATkB,eAAhBH,GAYN,MAAO,CAAEI,SAAU,EAAZ,sBAAwCJ,QAAAA,O,iBArB1C,EAAKK,sB,uBAC4B,4DAAgD,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAAjD,eAA9BC,GACN,wBAA6B,IAAIA,EAAsB,EAAvD,W,mDAvCN,MAAAC,GAAA,sBAAAA,KAAA,6BA8DI,uBAAOX,KAAP,uBA9DJ,MAAAW,GAAA,sBAAAA,KAAA,4BAkEI,OAAOC,QAAAA,QAAgBZ,KAAA,sBAAvB,SAlEJ,MAAAW,GAAA,sBAAAA,KAAA,4BAsEI,OAAOC,QAAA,QAAgBZ,KAAA,sBAAhB,gBAA0D,mBAAgCI,EAAhC,MAtErE,MAAAO,GAAA,sBAAAA,KAAA,aAyESE,WACDb,KAAJ,wBACEA,KAAA,kDAAwDA,KAAxD,kBACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,uBACAA,KAAA,qCA9EN,uB,OAmFIA,KAAA,iB,kBAnFJ,MAAAW,GAAA,sBAAAA,KAAA","sources":["../node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],"names":["URI_AVAILABLE","UserRejectedRequestError","getSupportedChains","supportedChainIds","rpc","Object","k","Number","WalletConnectConnector","config","handleChainChanged","this","chainId","handleAccountsChanged","account","accounts","handleDisconnect","error","provider","walletConnectProvider","m","WalletConnectProvider","e","Promise","deactivate"],"sourceRoot":""}